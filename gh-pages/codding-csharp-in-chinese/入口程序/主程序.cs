using 入口程序.公共代码;
using 基础设施;
using 基础设施.查询;
using 基础设施.集合;

namespace 入口程序
{
    class 主程序
    {
        static internal void 主方法()
        {
            列表<登录信息> 详细信息集合 = new 列表<登录信息>();

            详细信息集合.添加(new 登录信息
            {
                姓名 = "张三",
                总工作年限 = 10,
                总获奖次数 = 2,
                是有效用户 = 布尔.真
            });

            详细信息集合.添加(new 登录信息
            {
                姓名 = "李四",
                总工作年限 = 4,
                总获奖次数 = 0,
                是有效用户 = 布尔.真
            });

            详细信息集合.添加(new 登录信息
            {
                姓名 = "王五",
                总工作年限 = 2,
                总获奖次数 = 0,
                是有效用户 = 布尔.真
            });

            遍历器<登录信息>.计数遍历(详细信息集合).从(0).到(详细信息集合.长度()).每隔(1).执行((当前行索引, 登陆信息) =>
            {
                异常.对以下语句进行异常检测(() =>
                {
                    控制台.输出字符串("{0}获奖次数:{1}", 登陆信息.姓名, 登陆信息.总获奖次数);

                    判断.如果是(登陆信息.总获奖次数 > 0).则(() =>
                    {
                        控制台.输出字符串("挺优秀的，拿过奖。");

                    }).否则如果是(登陆信息.总工作年限<3).则(() =>
                    {
                        控制台.输出字符串("新员工，未来可期。");
                    }).否则(() =>
                    {
                        控制台.输出字符串("要加把劲了。");
                    });                    
                    控制台.输出字符串("尝试计算获奖一次大概花了多少年。");
                    整型 平均时间 = 登陆信息.总工作年限 / 登陆信息.总获奖次数;

                }).发现异常则<被除零异常>(异常 =>
                {
                    控制台.输出字符串("发生被除零异常");
                }).发现异常则(异常 =>
                {
                    控制台.输出字符串("曾经出现过异常");

                }).最终执行(() =>
                {
                    控制台.输出字符串("介绍结束\n");
                });
            });


        }
    }
}
